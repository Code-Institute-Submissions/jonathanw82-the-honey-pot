  @login_required
def create_or_edit_review(request, product_id, pk):
    """ A view to createing and editing reviews """
    print(pk)
    product = product_id
    user = request.user.id
    review = get_object_or_404(Review, pk=pk) if pk else None
    if request.method == 'POST':
        form = ReviewPostForm(request.POST, instance=review)
        if form.is_valid():
            review = form.save(commit=False)
            review.user = User_Profile.objects.get(user=user)
            review.product_id = product
            review.save()
            messages.success(request, 'Your review\
                was Successful!')
            return redirect('product_info', product_id)
    else:
        form = ReviewPostForm(instance=review)
        context = {
            'form': form,
            'product': product,
        }
    return render(request, 'review/reviewpostform.html', context)
  
  <hr>
            <h2>What our customers say about this product</h2>
            <a class="btn btn-primary" href="{% url 'create_review' product.id %}">create review</a>
            <hr><div class="container">
            <div class="row">
                {% for rev in review %}
                <div class="col-md-8">
                <!-- {% if rev.pk == product_id %} -->
                    <h5>{{ rev.title }}</h5>
                    <p>{{ rev.content }}</p>
                    <a href="{% url 'edit_review' rev.pk %}" class="btn btn-default">Edit Review</a>
                    <a href="{% url 'review_delete' rev.pk %}" class="btn btn-default">Delete</a>
                <!-- {% endif %}     -->
                <!-- {% if rev.user == request.user %}     -->
                <!-- {% endif %} -->
                    <hr>
                </div>
            {% endfor %}
  
  
  
  <div class="container">
    <div class="row card_row"> 
        {% for product in products %}
        <div class="col-12 col-sm-6 col-md-6 col-lg-4 product_cards">
        <a href="{% url 'product_info' product.id %}">
            <div class="card">
                    <img class="card-img-top" src="{{ product.image.url }}" alt="{{ product.name }}">
                <div class="card-body">
                    <h5 class="card-title">{{ product.name }}</h5>
                    <p class="card-heading">Â£{{ product.price }}</p>
                </div>
            </div>
            </a>
        </div>
        {% endfor %}
    </div>
</div>




login_required
def create_or_edit_Review(request, pk=None):
    """ A view to createing and editing blogs """
    if not request.user.is_superuser:
        messages.error(request, 'Sorry, only site admins can create blogs.')
        return redirect(reverse('home'))

    user = request.user
    review = get_object_or_404(Review, pk=pk) if pk else None
    if request.method == 'POST':
        form = ReviewPostForm(request.POST, request.FILES, instance=review)
        if form.is_valid():
            review = form.save(commit=False)
            review.user = User_Profile.objects.get(user=user)
            review.save()
            messages.success(request, 'Your blog post\
                was Successful!')
            return redirect(blog_detail, blog.pk)
    else:
        form = ReviewPostForm(instance=review)
        context = {
            'form': form
        }
    return render(request, 'review/reviewpostform.html', context)


from django.db import models
from django.utils import timezone
from django.contrib.auth.models import User
from profiles.models import User_Profile
from datetime import datetime, date


class Review(models.Model):
    """ A blog post
    """
    user = models.ForeignKey(User_Profile, on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    content = models.TextField()
    created_date = models.DateTimeField(auto_now_add=True)
    published_date = models.DateTimeField(blank=True, null=True,
                                          default=timezone.now)
    image = models.ImageField(upload_to='media/blogimage/',
                              blank=True, null=True)

    def __str__(self):
        return self.title

    class Meta:
        verbose_name_plural = 'Review'



from django import forms
from .models import Review


class ReviewPostForm(forms.ModelForm):
    class Meta:
        model = Blog
        fields = ('title', 'content', 'published_date')

    
from django.urls import path
from .import views

urlpatterns = [
    path('get_blogs/', views.get_blogs, name='get_blogs'),
    path('blog_detail/<pk>', views.blog_detail, name='blog_detail'),
    path('create/', views.create_or_edit_blog, name='create'),
    path('edit_blog/<pk>', views.create_or_edit_blog, name='edit_blog'),
    path('blog_delete/<pk>', views.blog_delete, name='blog_delete')
]

