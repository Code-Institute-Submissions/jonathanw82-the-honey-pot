@login_required
def create_or_edit_Review(request, pk=None):
    """ A view to createing and editing blogs """
    if not request.user.is_superuser:
        messages.error(request, 'Sorry, only site admins can create blogs.')
        return redirect(reverse('home'))

    user = request.user
    review = get_object_or_404(Review, pk=pk) if pk else None
    if request.method == 'POST':
        form = ReviewPostForm(request.POST, request.FILES, instance=review)
        if form.is_valid():
            review = form.save(commit=False)
            review.user = User_Profile.objects.get(user=user)
            review.save()
            messages.success(request, 'Your blog post\
                was Successful!')
            return redirect(blog_detail, blog.pk)
    else:
        form = ReviewPostForm(instance=review)
        context = {
            'form': form
        }
    return render(request, 'review/reviewpostform.html', context)


from django.db import models
from django.utils import timezone
from django.contrib.auth.models import User
from profiles.models import User_Profile
from datetime import datetime, date


class Review(models.Model):
    """ A blog post
    """
    user = models.ForeignKey(User_Profile, on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    content = models.TextField()
    created_date = models.DateTimeField(auto_now_add=True)
    published_date = models.DateTimeField(blank=True, null=True,
                                          default=timezone.now)
    image = models.ImageField(upload_to='media/blogimage/',
                              blank=True, null=True)

    def __str__(self):
        return self.title

    class Meta:
        verbose_name_plural = 'Review'



from django import forms
from .models import Review


class ReviewPostForm(forms.ModelForm):
    class Meta:
        model = Blog
        fields = ('title', 'content', 'published_date')

    
from django.urls import path
from .import views

urlpatterns = [
    path('get_blogs/', views.get_blogs, name='get_blogs'),
    path('blog_detail/<pk>', views.blog_detail, name='blog_detail'),
    path('create/', views.create_or_edit_blog, name='create'),
    path('edit_blog/<pk>', views.create_or_edit_blog, name='edit_blog'),
    path('blog_delete/<pk>', views.blog_delete, name='blog_delete')
]

